import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from statsmodels.tsa.seasonal import seasonal_decompose
import datetime
import json
import os
from PIL import Image
import matplotlib.pyplot as plt
import matplotlib as mpl
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import requests
from datetime import datetime
import schedule
import threading
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import cross_val_predict
from sklearn.linear_model import LinearRegression
from config import (
    PAGE_CONFIG,
    CHART_CONFIG,
    DB_CONFIG,
    MAIL_CONFIG,
    MODEL_CONFIG
)

from utils import visitor_tracker
# pip freeze > requirements.txt
# .\venv\Scripts\activate.ps1
# cd "D:\curso\streamlit\resume"
# streamlit run 01_üéà_resume_app.py
#resume-zgurc7bvpu98gu2n3u2uqw.streamlit.app

# Ë®™ÂïèËÄÖËøΩËπ§ÂáΩÊï∏
def get_visitor_ip():
    """Áç≤ÂèñË®™ÂïèËÄÖIPÂú∞ÂùÄ"""
    try:
        response = requests.get('https://api.ipify.org?format=json')
        return response.json()['ip']
    except:
        return 'Êú™Áü•'

def load_visitor_data():
    try:
        with open('visitor_data.json', 'r') as f:
            return json.load(f)
    except:
        return {'total_visits': 0, 'daily_visits': {}, 'ip_records': {}}

def save_visitor_data(data):
    with open('visitor_data.json', 'w') as f:
        json.dump(data, f)

def update_visitor_count():
    visitor_data = load_visitor_data()
    today = datetime.now().strftime('%Y-%m-%d')
    ip = get_visitor_ip()
    
    # Êõ¥Êñ∞Á∏ΩË®™ÂïèÈáè
    visitor_data['total_visits'] += 1
    
    # Êõ¥Êñ∞ÊØèÊó•Ë®™Âïè
    if today not in visitor_data['daily_visits']:
        visitor_data['daily_visits'][today] = 0
    visitor_data['daily_visits'][today] += 1
    
    # Ë®òÈåÑIP
    if today not in visitor_data['ip_records']:
        visitor_data['ip_records'][today] = []
    if ip not in visitor_data['ip_records'][today]:
        visitor_data['ip_records'][today].append(ip)
    
    save_visitor_data(visitor_data)
    
    # Ê™¢Êü•ÊòØÂê¶ÈúÄË¶ÅÁôºÈÄÅÂ†±Âëä
    current_time = datetime.now()
    if current_time.hour == 20 and current_time.minute == 0:
        send_daily_report(visitor_data, today)
    
    return visitor_data['total_visits']

def send_daily_report(visitor_data, today):
    # Áç≤ÂèñIPÂú∞ÁêÜ‰ΩçÁΩÆË≥áË®ä
    ip_locations = []
    for ip in visitor_data['ip_records'].get(today, []):
        try:
            response = requests.get(f'http://ip-api.com/json/{ip}')
            location = response.json()
            ip_locations.append(
                f"IP: {ip}\n"
                f"‰ΩçÁΩÆ: {location.get('city', 'Êú™Áü•')}, {location.get('country', 'Êú™Áü•')}\n"
                f"ÁµÑÁπî: {location.get('org', 'Êú™Áü•')}"
            )
        except:
            ip_locations.append(f"IP: {ip}, ‰ΩçÁΩÆ: Êú™Áü•")
    
    # ÊßãÂª∫ÈÉµ‰ª∂ÂÖßÂÆπ
    email_content = (
        f"Êó•Êúü: {today}\n"
        f"‰ªäÊó•Ë®™ÂïèÈáè: {visitor_data['daily_visits'].get(today, 0)}\n"
        f"Ë®™ÂïèIP‰æÜÊ∫ê:\n"
        f"{''.join(ip_locations)}"
    )
    
    # ÁôºÈÄÅÈÉµ‰ª∂
    msg = MIMEMultipart()
    msg['From'] = 'Teriyaki0730@gmail.com'
    msg['To'] = 'lauandhang@yahoo.com.tw'
    msg['Subject'] = f'Á∞°Ê≠∑Á∂≤Á´ôË®™ÂïèÁµ±Ë®àÂ†±Âëä - {today}'
    msg.attach(MIMEText(email_content, 'plain'))

# Ê∑ªÂä†Ê∞£È´îÊµÅÈáèÁõ£ÊéßÂíåAIÈ†êÊ∏¨ÂäüËÉΩ
@st.cache_data(ttl=3600)
def generate_gas_data():
    # Ê∏õÂ∞ëÁîüÊàêÁöÑË≥áÊñôÈáè
    dates = pd.date_range(start='2023-01-01', periods=1000, freq='H')  # Âè™ÁîüÊàê1000Á≠ÜË≥áÊñô
    n_samples = len(dates)
    
    base_flow = {
        'Ar': 100,
        'N2': 50,
        'O2': 25,
        'CF4': 30,
        'SF6': 15
    }
    
    data = pd.DataFrame({'timestamp': dates})
    for gas, base in base_flow.items():
        periodic = np.sin(np.linspace(0, 8*np.pi, n_samples)) * base * 0.1
        noise = np.random.normal(0, base * 0.05, n_samples)
        trend = np.linspace(0, base * 0.05, n_samples)
        data[f'{gas}_flow'] = base + periodic + noise + trend
    
    return data

# @st.cache
@st.cache_data(ttl=3600)  # Ë®≠ÁΩÆ1Â∞èÊôÇÁöÑÂø´ÂèñÊôÇÈñì
def train_gas_model(data):
    # ÈôêÂà∂Ë≥áÊñôÈáè
    if len(data) > 1000:
        data = data.tail(1000)  # Âè™‰ΩøÁî®ÊúÄËøë1000Á≠ÜË≥áÊñô
        
    features = ['hour', 'day_of_week', 'month']
    data['hour'] = data['timestamp'].dt.hour
    data['day_of_week'] = data['timestamp'].dt.dayofweek
    data['month'] = data['timestamp'].dt.month
    
    models = {}
    scalers = {}
    gas_columns = [col for col in data.columns if '_flow' in col]
    
    for gas in gas_columns:
        X = data[features].values
        y = data[gas].values
        
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)
        
        model = RandomForestRegressor(n_estimators=50, random_state=42)  # Ê∏õÂ∞ëÊ®πÁöÑÊï∏Èáè
        model.fit(X_scaled, y)
        
        models[gas] = model
        scalers[gas] = scaler
    
    return models, scalers

def predict_gas_flow(models, scalers, hours=24):
    future_times = pd.date_range(
        start=datetime.now(),
        periods=hours,
        freq='H'
    )
    
    future_data = pd.DataFrame({
        'hour': future_times.hour,
        'day_of_week': future_times.dayofweek,
        'month': future_times.month
    })
    
    predictions = pd.DataFrame({'timestamp': future_times})
    for gas, model in models.items():
        X = future_data.values
        X_scaled = scalers[gas].transform(X)
        predictions[gas] = model.predict(X_scaled)
    
    return predictions

# ÂïüÂãïÂÆöÊôÇ‰ªªÂãô
def run_schedule():
    schedule.run_pending()
    
# ÊîπÁî® Streamlit ÁöÑ scheduled_rerun ‰æÜËôïÁêÜÂÆöÊôÇ‰ªªÂãô
if 'last_run' not in st.session_state:
    st.session_state.last_run = datetime.now()

current_time = datetime.now()
if current_time.hour == 20 and (current_time - st.session_state.last_run).seconds >= 3600:
    send_daily_report(load_visitor_data(), current_time.strftime('%Y-%m-%d'))
    st.session_state.last_run = current_time

# Ë®≠ÁΩÆ‰∏≠ÊñáÂ≠óÈ´î
plt.rcParams['font.sans-serif'] = CHART_CONFIG["font_family"]
plt.rcParams['axes.unicode_minus'] = False
mpl.rcParams['font.family'] = CHART_CONFIG["font_family"]

# ÂÖ®Â±ÄÊ®£Âºè
st.markdown("""
<style>
    /* ‰∏ªÈ°åË®≠ÂÆö */
    :root {
        --primary-color: #4A90E2;
        --secondary-color: #50E3C2;
        --background-color: #FFFFFF;
        --text-color: #1A1F36;
        --highlight-color: #2C7BE5;
    }
    
    /* Ê∑±Ëâ≤‰∏ªÈ°å */
    [data-theme="light"] {
        --background-color: #0E1117;
        --text-color: #E0E0E0;
    }
    
    /* Â∞éËà™ËèúÂñÆÊ®£Âºè */
    .stRadio > label {
        font-size: 1.8em !important;
        font-weight: 600 !important;
    }
        
    
        /* ËÅØÁπ´ÊñπÂºè     */
    .stRadio > label {
        font-size: 2em !important;
        font-weight: 600 !important;
    }
            
    /* ÊäÄËÉΩÊ®ôÁ±§Ê®£Âºè */
    .tech-badge {
        background: linear-gradient(45deg, var(--primary-color), var(--secondary-color));
        padding: 15px 30px;
        border-radius: 25px;
        margin: 10px;
        display: inline-block;
        color: white;
        font-size: 5em !important;
        font-weight: 600;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    
    /* ÊäÄËÉΩÊ®πÊ®£Âºè */
    .skill-tree {
        margin: 20px 0;
        padding: 20px;
        background: rgba(255,255,255,0.1);
        border-radius: 15px;
    }
    
    .skill-tree-item {
        font-size: 2em !important;
        margin: 10px 0;
        padding-left: 30px;
    }
    
    /* Á∂ìÊ≠∑Âç°ÁâáÊ®£Âºè */
    .experience-card {
        padding: 25px;
        margin: 15px 0;
        border-radius: 15px;
        background: rgba(255,255,255,0.1);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    .experience-card h3 {
        font-size: 4em !important;
        color: var(--primary-color);
    }
    
    .experience-card h4 {
        font-size: 3em !important;
    }
    
    .experience-card li {
        font-size: 1.8em !important;
    }
    
    /* Ë®™ÂïèË®àÊï∏Âô®Ê®£Âºè */
    .visitor-counter {
        position: fixed;
        top: 100px;
        right: 20px;
        background: linear-gradient(45deg, var(--primary-color), var(--secondary-color));
        padding: 10px 20px;
        border-radius: 30px;
        color: white;
        font-size: 1.6em !important;
        z-index: 1000;
    }
    
    /* Èò≤Ë§áË£ΩÊ®£Âºè */
    * {
        user-select: none !important;
        -webkit-user-select: none !important;
        -moz-user-select: none !important;
        -ms-user-select: none !important;
    }
    
    /* Ê∞¥Âç∞Ê®£Âºè */
    .watermark {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        background: repeating-linear-gradient(
            45deg,
            rgba(74, 144, 226, 0.1),
            rgba(74, 144, 226, 0.1) 10px,
            rgba(80, 227, 194, 0.1) 10px,
            rgba(80, 227, 194, 0.1) 20px
        );
        z-index: 9999;
    }
    
    /* Ê®ôÈ°åÂíåÊñáÊú¨Ê®£Âºè */
    h1 {
        font-size: 3em !important;
    }
    
    h2 {
        font-size: 2.5em !important;
    }
    
    h3 {
        font-size: 2.2em !important;
    }
    
    p, li {
        font-size: 1.8em !important;
    }
    
    /* ÂúñË°®Ê®ôÈ°åÊ®£Âºè */
    .plotly .gtitle {
        font-size: 2em !important;
    }
</style>

<script>
    // Èò≤Ë§áË£ΩÂäüËÉΩ
    document.addEventListener('contextmenu', e => e.preventDefault());
    document.addEventListener('keydown', e => {
        if (e.ctrlKey || e.keyCode === 44) e.preventDefault();
    });
    
    // Ê∑ªÂä†Ê∞¥Âç∞
    window.onload = function() {
        const watermark = document.createElement('div');
        watermark.className = 'watermark';
        document.body.appendChild(watermark);
    };
</script>
""", unsafe_allow_html=True)

# Ëá™ÂÆöÁæ© CSS Ê®£Âºè
st.markdown("""
<style>
    /* Ë™øÊï¥ÈÅ∏ÊìáÊ°ÜÂ§ßÂ∞è */
    .stSelectbox {
        min-width: 300px !important;
    }
    
    .stSelectbox > div {
        min-height: 45px !important;
    }
    
    /* Ë™øÊï¥ÂÆπÂô®ÂØ¨Â∫¶ */
    .element-container, .stMarkdown {
        width: 100% !important;
        max-width: 100% !important;
    }
    
    /* Ë™øÊï¥Âç°ÁâáÊ®£Âºè */
    .skill-card, .experience-card {
        background-color: #ffffff;
        padding: 1.5rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin: 1rem 0;
        width: 100%;
    }
    
    /* Ë™øÊï¥ÂúñË°®ÂÆπÂô® */
    .stPlotlyChart, .stPlot {
        min-height: 400px;
        width: 100% !important;
        background: white;
        padding: 1.5rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    /* Ë™øÊï¥Ê®ôÈ°åÊ®£Âºè */
    h1, h2, h3 {
        margin: 1.5rem 0;
        color: #1e88e5;
    }
    
    /* Ë™øÊï¥ÊäÄËÉΩÊ®ôÁ±§Ê®£Âºè */
    .tech-badge {
        display: inline-block;
        padding: 0.5rem 1rem;
        margin: 0.3rem;
        background-color: #f8f9fa;
        border-radius: 20px;
        font-size: 1rem;
    }
</style>
""", unsafe_allow_html=True)

# Ê∑ªÂä†Êõ¥Â§öÊ®£Âºè
st.markdown("""
<style>
    /* ÂÄã‰∫∫Ë≥áÊñôÂçÄÂ°äÊ®£Âºè */
    .profile-section {
        background: white;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 2rem;
    }
    
    .profile-section h1 {
        font-size: 2.5rem;
        margin-bottom: 0.5rem;
        color: #1e88e5;
    }
    
    .profile-section h2 {
        font-size: 1.5rem;
        color: #424242;
        margin-bottom: 1.5rem;
    }
    
    /* ÊäÄËÉΩÊ®ôÁ±§ÂÆπÂô® */
    .tech-badges {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin: 1rem 0;
    }
    
    /* ËÅØÁπ´ÊñπÂºèÊ®£Âºè */
    .contact-section {
        margin-top: 1.5rem;
        padding: 1rem;
        background: #f8f9fa;
        border-radius: 8px;
    }
    
    .contact-section p {
        margin: 0.5rem 0;
        font-size: 1.1rem;
        color: #424242;
    }
    
    /* Â∑•‰ΩúÁ∂ìÈ©óÂçÄÂ°äÊ®£Âºè */
    .experience-section {
        margin-top: 2rem;
    }
    
    .experience-card {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 1.5rem;
    }
    
    .experience-card h3 {
        color: #1e88e5;
        margin-bottom: 0.5rem;
    }
    
    .experience-card h4 {
        color: #424242;
        margin: 0.5rem 0;
    }
    
    .experience-card li {
        font-size: 1.8em !important;
    }
    
    /* Ë®™ÂïèË®àÊï∏Âô®Ê®£Âºè */
    .visitor-counter {
        position: fixed;
        top: 100px;
        right: 20px;
        background: linear-gradient(45deg, var(--primary-color), var(--secondary-color));
        padding: 10px 20px;
        border-radius: 30px;
        color: white;
        font-size: 1.6em !important;
        z-index: 1000;
    }
    
    /* Èò≤Ë§áË£ΩÊ®£Âºè */
    * {
        user-select: none !important;
        -webkit-user-select: none !important;
        -moz-user-select: none !important;
        -ms-user-select: none !important;
    }
    
    /* Ê∞¥Âç∞Ê®£Âºè */
    .watermark {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        background: repeating-linear-gradient(
            45deg,
            rgba(74, 144, 226, 0.1),
            rgba(74, 144, 226, 0.1) 10px,
            rgba(80, 227, 194, 0.1) 10px,
            rgba(80, 227, 194, 0.1) 20px
        );
        z-index: 9999;
    }
    
    /* Ê®ôÈ°åÂíåÊñáÊú¨Ê®£Âºè */
    h1 {
        font-size: 3em !important;
    }
    
    h2 {
        font-size: 2.5em !important;
    }
    
    h3 {
        font-size: 2.2em !important;
    }
    
    p, li {
        font-size: 1.8em !important;
    }
    
    /* ÂúñË°®Ê®ôÈ°åÊ®£Âºè */
    .plotly .gtitle {
        font-size: 2em !important;
    }
</style>

<script>
    // Èò≤Ë§áË£ΩÂäüËÉΩ
    document.addEventListener('contextmenu', e => e.preventDefault());
    document.addEventListener('keydown', e => {
        if (e.ctrlKey || e.keyCode === 44) e.preventDefault();
    });
    
    // Ê∑ªÂä†Ê∞¥Âç∞
    window.onload = function() {
        const watermark = document.createElement('div');
        watermark.className = 'watermark';
        document.body.appendChild(watermark);
    };
</script>
""", unsafe_allow_html=True)

# Ê∑ªÂä†ÈÅ∏È†ÖÊ¨Ñ‰ΩçÊ®£Âºè
st.markdown("""
<style>
    /* ÈÅ∏È†ÖÊ¨Ñ‰ΩçÊ®£Âºè */
    .tech-list {
        list-style: none;
        padding: 0;
        margin: 1rem 0;
    }
    
    .tech-list li {
        background-color: #f8f9fa;
        margin: 0.5rem 0;
        padding: 0.8rem 1rem;
        border-radius: 8px;
        color: #1e88e5;
        font-weight: 500;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        transition: all 0.3s ease;
    }
    
    .tech-list li:hover {
        background-color: #e3f2fd;
        transform: translateX(5px);
    }
    
    .tech-category {
        font-size: 1.2rem;
        color: #424242;
        margin: 1.5rem 0 1rem 0;
        font-weight: 500;
    }
</style>
""", unsafe_allow_html=True)

# ÂÅ¥ÈÇäÊ¨ÑË®≠ÁΩÆ
with st.sidebar:
    st.markdown("### üéØ Â∞éËà™ËèúÂñÆ")
    page = st.radio(
        "",
        ["üìä ÂÄã‰∫∫Á∏ΩË¶Ω", "üíº Â∞àÊ•≠Á∂ìÊ≠∑", "üéì ÊïôËÇ≤ËÉåÊôØ", "üõ†Ô∏è ÊäÄËÉΩÂ∞àÈï∑", 
         "üåü ÂÄã‰∫∫ÁâπË≥™", "üìà Â∞àÊ°àÂ±ïÁ§∫", "üî¨ Â∞àÊ°àÂàÜÊûê"],
        key="navigation_menu"
    )
    
    st.markdown("---")
    
    # Ë™ûË®ÄÂàáÊèõ
    st.markdown("### üåê Ë™ûË®ÄÂàáÊèõ")
    language = st.selectbox(
        "",
        ["ÁπÅÈ´î‰∏≠Êñá", "English"],
        key="language_selector",
        help="ÈÅ∏ÊìáÈ°ØÁ§∫Ë™ûË®Ä"
    )
    
    st.markdown("---")
    
    # ‰∏ªÈ°åË®≠ÁΩÆ
    st.markdown("### üé® ‰∏ªÈ°åË®≠ÁΩÆ")
    theme = st.selectbox(
        "",
        ["Ê∑∫Ëâ≤‰∏ªÈ°å", "Ê∑±Ëâ≤‰∏ªÈ°å"],
        key="theme_selector",
        help="ÈÅ∏ÊìáÈ°ØÁ§∫‰∏ªÈ°å"
    )
    
    # ‰∏ªÈ°åÂàáÊèõÈÇèËºØ
    if theme == "Ê∑±Ëâ≤‰∏ªÈ°å":
        st.markdown("""
        <style>
            /* Ê∑±Ëâ≤‰∏ªÈ°åÊ®£Âºè */
            :root {
                --primary-color: #4A90E2;
                --background-color: #1E1E1E;
                --text-color: #E0E0E0;
            }
            
            .stApp {
                background-color: var(--background-color);
                color: var(--text-color);
            }
            
            .stSelectbox select {
                background-color: var(--background-color);
                color: var(--text-color);
            }
        </style>
        """, unsafe_allow_html=True)

# Êõ¥Êñ∞Ë®™ÂïèË®àÊï∏
total_visits = visitor_tracker.update_visitor_count()

# È°ØÁ§∫Ë®™ÂïèË®àÊï∏Âô®
visitor_counter = f"""
<div class='visitor-counter'>
    üëÄ Ë®™ÂïèÈáè: {total_visits}
</div>
"""
st.markdown(visitor_counter, unsafe_allow_html=True)

# Ê™¢Êü•ÊòØÂê¶ÈúÄË¶ÅÁôºÈÄÅÊØèÊó•Â†±Âëä
if 'last_run' not in st.session_state:
    st.session_state.last_run = datetime.now()

current_time = datetime.now()
if (current_time - st.session_state.last_run).days >= 1:
    visitor_tracker.send_daily_report()
    st.session_state.last_run = current_time

# Ê∑ªÂä†Ê®ôÈ°å
st.markdown("""
<h1 style='text-align: center; color: var(--primary-color);'>
    ÂäâÊôâ‰∫®ÁöÑÂÄã‰∫∫Á∞°Ê≠∑ | Patrick Liou Resume
</h1>
""", unsafe_allow_html=True)

st.markdown("""
<div style='background-color: #FFE873; padding: 1rem; border-radius: 8px; margin-bottom: 1rem;'>
    Ëã•ÈúÄËã±ÊñáÈù¢Ë©¶ÊàñÂä†Áè≠Ë´ã pass | If you need an interview in English or work overtime, please pass
</div>
""", unsafe_allow_html=True)

# ÂúñÁâáËôïÁêÜÂáΩÊï∏
def load_profile_image():
    try:
        img_path = "PHOTO.jpg"
        if img_path.exists():
            return Image.open(img_path)
        else:
            st.warning(f"ÁÑ°Ê≥ïÊâæÂà∞ÂúñÁâáÔºö{img_path}")
            return None
    except Exception as e:
        st.warning(f"ËºâÂÖ•ÂúñÁâáÊôÇÁôºÁîüÈåØË™§Ôºö{str(e)}")
        return None

# ‰∏ªË¶ÅÂÖßÂÆπÂçÄÂüü
if page == "üìä ÂÄã‰∫∫Á∏ΩË¶Ω":
    col1, col2 = st.columns([1, 2])
    
    with col1:
        profile_image = load_profile_image()
        if profile_image:
            st.image(profile_image, width=300, use_column_width=True, output_format="JPEG", clamp=True)
    
    with col2:
        st.markdown("""
        <div class='profile-section'>
            <h1>ÂäâÊôâ‰∫® <span class='highlight'>Patrick Liou</span></h1>
            <h2>ü§ñ Ë≥áÊ∑±Ë£ΩÁ®ãÊï¥ÂêàÂ∑•Á®ãÂ∏´ | AIËàáÂ§ßÊï∏ÊìöÂ∞àÂÆ∂</h2>
            
            <div class='skill-card'>
                <h3>üéØ Ê†∏ÂøÉÂ∞àÈï∑</h3>
                <div class='tech-badges'>
                    <span class='tech-badge'>üìçÂ§ßÊï∏ÊìöÂàÜÊûê</span>
                    <span class='tech-badge'>üì±Ê©üÂô®Â≠∏Áøí</span>
                    <span class='tech-badge'>üìßÊ∑±Â∫¶Â≠∏Áøí</span>
                    <span class='tech-badge'>üìçË£ΩÁ®ãÊï¥Âêà</span>
                    <span class='tech-badge'>üì±ÂÖ≠Ê®ôÊ∫ñÂ∑Æ</span>
                    <span class='tech-badge'>üìßÊô∫ËÉΩÂ∑•Âª†</span>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    # Ê∑ªÂä†Â∑•‰ΩúÁ∂ìÈ©óÈÉ®ÂàÜ
    st.markdown("""
    <div class='experience-section'>
        <h2>Â∑•‰ΩúÁ∂ìÈ©ó</h2>
        
        <div class='experience-card'>
            <h3>ËÅØÈõª (UMC)</h3>
            <p class='highlight'>2015Âπ¥1Êúà - Ëá≥‰ªä</p>
            <h4>Ë≥áÊ∑±Ë£ΩÁ®ãÊï¥ÂêàÂ∑•Á®ãÂ∏´</h4>
            <ul>
                <li>Ë≤†Ë≤¨Êñ∞Ë£ΩÁ®ãÊäÄË°ìÂ∞éÂÖ•ËàáÂÑ™Âåñ</li>
                <li>Âª∫Á´ãÊô∫ËÉΩÈ†êË≠¶Á≥ªÁµ±ÔºåÊèêÂçáËâØÁéá15%</li>
                <li>ÈñãÁôºËá™ÂãïÂåñÊï∏ÊìöÂàÜÊûêÂ∑•ÂÖ∑</li>
            </ul>
        </div>
        
        <div class='experience-card'>
            <h3>Âè∞Á©çÈõª (TSMC)</h3>
            <p class='highlight'>2014Âπ¥3Êúà - 2014Âπ¥12Êúà</p>
            <h4>Ë®≠ÂÇôÂ∑•Á®ãÂ∏´</h4>
            <ul>
                <li>Ë≤†Ë≤¨Ë®≠ÂÇôÁ∂≠Ë≠∑ËàáÊïàËÉΩÂÑ™Âåñ</li>
                <li>ÂèÉËàáÊñ∞‰∏ñ‰ª£Ë£ΩÁ®ãÈñãÁôº</li>
            </ul>
        </div>
    </div>
    """, unsafe_allow_html=True)

elif page == "üíº Â∞àÊ•≠Á∂ìÊ≠∑":
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("""
        <div class='experience-card'>
            <h3>Áæ§ÂâµÂÖâÈõª (Innolux Corporation)</h3>
            <p class='highlight'>2014Âπ¥12Êúà - Ëá≥‰ªä</p>
            <h4>Ë£ΩÁ®ãÂ∑•Á®ãÂ∏´ / Team Leader</h4>
            <ul>
                <li>È†òÂ∞éÊô∫ËÉΩÂ∑•Âª†Â∞àÊ°àÔºåÊàêÂäüÂ∞éÂÖ•Â∑•Ê•≠4.0Ëß£Ê±∫ÊñπÊ°àÔºåÈ°ØËëóÊèêÂçáÁîüÁî¢ÊïàÁéá</li>
                <li>ÈñãÁôºYOLOv4Áº∫Èô∑Ê™¢Ê∏¨Ê®°ÂûãÔºåÁ∏ÆÁü≠ÂèçÈ•ãÊôÇÈñì‰∏¶ÊèêÈ´òÁº∫Èô∑Ê™¢Âá∫Áéá60%</li>
                <li>‰∏ªÂ∞é3È†ÖÂÖ≠Ê®ôÊ∫ñÂ∑ÆÂ∞àÊ°àÔºåÂÑ™ÂåñË£ΩÁ®ãÂèÉÊï∏‰∏¶Èôç‰ΩéÁî¢ÂìÅÊ¨°ÂìÅÁéáÔºåÁØÄÁúÅ2100Ëê¨Âè∞Âπ£/Âπ¥</li>
            </ul>
        </div>
        
        <div class='experience-card'>
            <h3>Âè∞Á©çÈõª (tsmc) </h3>S
            <p class='highlight'>2014Âπ¥3Êúà - 2014Âπ¥12Êúà</p>
            <h4>Ë®≠ÂÇôÂ∑•Á®ãÂ∏´</h4>
            <ul>
                <li>ÂÑ™ÂåñË£ΩÁ®ãÂ∑•ÂÖ∑ÂèÉÊï∏ÔºåÊèêÂçáÁî¢ÈáèËàáÁ©©ÂÆöÊÄßÔºåÁº∫Èô∑ÁéáÊîπÂñÑ4%</li>
                <li>Ê∏õÂ∞ëÁ≥ªÁµ±Â¥©ÊΩ∞ÁéáËá≥5%ÔºåÊèêÂçáË®≠ÂÇôÂèØÁî®ÊÄßËàáÁî¢ËÉΩÂà©Áî®Áéá</li>
            </ul>
        </div>

        <div class='experience-card'>
            <h3>Âè∞ÁÅ£Ê∞¥Ê≥• (Taiwan Cement Corp)</h3>
            <p class='highlight'>2013Âπ¥9Êúà - 2014Âπ¥3Êúà</p>
            <h4>ÂÑ≤ÂÇôÂππÈÉ®(MA)</h4>
            <ul>
                <li>Ë≤†Ë≤¨ÁîüÁî¢ÊµÅÁ®ãÁõ£ÊéßËàáÂÑ™ÂåñÔºåÁ∏ÆÁü≠Áì∂È†∏Â∑•Â∫èÊôÇÈñì15%</li>
                <li>ÂçîÂä©ÈñãÁôºÊñ∞PDAÁ≥ªÁµ±ÔºåÊèêÈ´òË£ΩÁ®ãËá™ÂãïÂåñÁ®ãÂ∫¶</li>
            </ul>
        </div>

        <div class='experience-card'>
            <h3>Áæ§ÂâµÂÖâÈõª (Innolux Corporation)</h3>
            <p class='highlight'>2010Âπ¥1Êúà - 2013Âπ¥9Êúà</p>
            <h4>Ë£ΩÁ®ãÂ∑•Á®ãÂ∏´</h4>
            <ul>
                <li>ÂçîÂä©Âª∫ÁΩÆÊñ∞Âª†ÔºåÂÆåÊàêË©¶ÈáèÁî¢‰∏¶Á∏ÆÁü≠Âª∫Âª†ÊôÇÁ®ã30%</li>
                <li>ÂàÜÊûêË®≠ÂÇôÊïÖÈöúÂéüÂõ†‰∏¶Êèê‰æõËß£Ê±∫ÊñπÊ°àÔºåÊèêÈ´òË®≠ÂÇôÁ®ºÂãïÁéá25%</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    with col2:    
        # Ê∑ªÂä†Èõ∑ÈÅîÂúñ
        skills = ['È†òÂ∞éËÉΩÂäõ', 'ÊäÄË°ìÂâµÊñ∞', 'Â∞àÊ°àÁÆ°ÁêÜ', 'ÂïèÈ°åËß£Ê±∫', 'ÂúòÈöäÂçî‰Ωú']
        values = [95, 90, 92, 88, 93]
        
        fig = go.Figure()
        fig.add_trace(go.Scatterpolar(
            r=values,
            theta=skills,
            fill='toself',
            name='Ê†∏ÂøÉËÉΩÂäõ'
        ))
        
        fig.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, 100]
                )),
            showlegend=False,
            title={
                'text': 'Ê†∏ÂøÉËÉΩÂäõË©ï‰º∞',
                'font': {'size': 24}
            },
            height=500
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    
        st.markdown("### ËÅ∑Ê∂ØÁôºÂ±ïÊ≠∑Á®ã")
        st.markdown("""
        ```mermaid
        graph TD
            A[ÂåñÂ∑•ËÉåÊôØ] --> B[Ë£ΩÁ®ãÊï¥Âêà]
            B --> C[Ë®≠ÂÇôÂÑ™Âåñ]
            C --> D[Êô∫ËÉΩË£ΩÈÄ†]
            D --> E[AIÊáâÁî®ÈñãÁôº]
            
            style A fill:#f9f,stroke:#333,stroke-width:4px
            style B fill:#bbf,stroke:#333,stroke-width:4px
            style C fill:#ddf,stroke:#333,stroke-width:4px
            style D fill:#fdd,stroke:#333,stroke-width:4px
            style E fill:#dfd,stroke:#333,stroke-width:4px
        ```
        """)
        
        st.markdown("### Ê†∏ÂøÉËÉΩÂäõÊàêÈï∑")
        st.markdown("""
        ```mermaid
        graph TD
            A[Ë£ΩÁ®ãÁü•Ë≠ò] --> B[Êï∏ÊìöÂàÜÊûê]
            B --> C[AIÊäÄË°ì]
            A --> D[ËâØÁéáÊèêÂçá]
            D --> E[Êô∫ËÉΩË£ΩÈÄ†]
            C --> E
            
            style A fill:#f9f,stroke:#333,stroke-width:4px
            style B fill:#bbf,stroke:#333,stroke-width:4px
            style C fill:#ddf,stroke:#333,stroke-width:4px
            style D fill:#fdd,stroke:#333,stroke-width:4px
            style E fill:#dfd,stroke:#333,stroke-width:4px
        ```
        """)

elif page == "üéì ÊïôËÇ≤ËÉåÊôØ":
    col1, col2 = st.columns([2, 1])
    
    with col1:   
        st.markdown("""
        <div class='education-card' style='font-size: 1.8em;'>
            <h3>ÂúãÁ´ã‰∫§ÈÄöÂ§ßÂ≠∏</h3>
            <p class='highlight'>2015Âπ¥9Êúà - 2018Âπ¥1Êúà</p>
            <h4>ÁÆ°ÁêÜÁßëÂ≠∏Á¢©Â£´ÔºàMBAÔºâ</h4>
            <ul>
                <li>Â∞àÊ•≠Ë™≤Á®ãÔºöÊï∏ÊìöÂàÜÊûêËàáÂïÜÊ•≠Êô∫ÊÖß„ÄÅÁáüÈÅãÁÆ°ÁêÜËàáÁ≠ñÁï•Ë¶èÂäÉ„ÄÅÂ∞àÊ°àÁÆ°ÁêÜËàáÈ†òÂ∞éÂäõ</li>
                <li>Á†îÁ©∂ÊñπÂêëÔºöË£ΩÈÄ†Ê•≠Êï∏‰ΩçËΩâÂûãËàáAIÊáâÁî®</li>
            </ul>
        </div>

        <div class='education-card' style='font-size: 1.8em;'>
            <h3>ÂúãÁ´ãÂè∞ÁÅ£Â§ßÂ≠∏</h3>
            <p class='highlight'>2015Âπ¥3Êúà - 2017Âπ¥6Êúà</p>
            <h4>ÊåÅÁ∫åÊïôËÇ≤Ê≥ïÂæãË™≤Á®ã</h4>
            <ul>
                <li>Â∞àÊ•≠Ë™≤Á®ãÔºöÂïÜÊ•≠Ê≥ïÂæã„ÄÅÊô∫ÊÖßË≤°Áî¢Ê¨ä„ÄÅÂãûÂãïÊ≥ïË¶è</li>
                <li>Á†îÁ©∂ÊñπÂêëÔºöÁßëÊäÄÁî¢Ê•≠Ê≥ïÂæãÂØ¶ÂãôÊáâÁî®</li>
            </ul>
        </div>

        <div class='education-card' style='font-size: 1.8em;'>
            <h3>ÂúãÁ´ãÂè∞ÁÅ£ÁßëÊäÄÂ§ßÂ≠∏</h3>
            <p class='highlight'>2006Âπ¥9Êúà - 2008Âπ¥6Êúà</p>
            <h4>ÂåñÂ≠∏Â∑•Á®ãÁ¢©Â£´</h4>
            <ul>
                <li>Â∞àÊ•≠Ë™≤Á®ãÔºöÂåñÂ∑•ÂñÆÂÖÉÊìç‰Ωú„ÄÅÂèçÊáâÂ∑•Á®ã„ÄÅÁ®ãÂ∫èÊéßÂà∂</li>
                <li>Á†îÁ©∂ÊñπÂêëÔºöË£ΩÁ®ãÊúÄ‰Ω≥ÂåñËàáÊéßÂà∂</li>
            </ul>
        </div>

        <div class='education-card' style='font-size: 1.8em;'>
            <h3>ÈÄ¢Áî≤Â§ßÂ≠∏</h3>
            <p class='highlight'>2002Âπ¥9Êúà - 2006Âπ¥6Êúà</p>
            <h4>ÂåñÂ≠∏Â∑•Á®ãÂ≠∏Â£´</h4>
            <ul>
                <li>Â∞àÊ•≠Ë™≤Á®ãÔºöÂåñÂ∑•ÂéüÁêÜ„ÄÅÁâ©ÁêÜÂåñÂ≠∏„ÄÅÂåñÂ∑•ÁÜ±ÂäõÂ≠∏</li>
                <li>Â∞àÈ°åÁ†îÁ©∂ÔºöË£ΩÁ®ãÁõ£ÊéßËàáËá™ÂãïÂåñ</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        
    
    
    with col2:
        # Ê∑ªÂä†Áü•Ë≠òÈ†òÂüüÂàÜÂ∏ÉÈõ∑ÈÅîÂúñ
        knowledge_areas = ['ÂåñÂ∑•Ë£ΩÁ®ã', 'Êï∏ÊìöÂàÜÊûê', 'ÁÆ°ÁêÜÂØ¶Âãô', 'Ê≥ïÂæãÁü•Ë≠ò', 'Êô∫ËÉΩË£ΩÈÄ†']
        knowledge_scores = [95, 90, 85, 80, 92]
        
        fig = go.Figure()
        fig.add_trace(go.Scatterpolar(
            r=knowledge_scores,
            theta=knowledge_areas,
            fill='toself',
            name='Áü•Ë≠òÈ†òÂüüÂàÜÂ∏É'
        ))
        
        fig.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, 100]
                )),
            showlegend=False,
            title={
                'text': 'Áü•Ë≠òÈ†òÂüüÂàÜÂ∏É',
                'font': {'size': 24}
            },
            height=500
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Ê∑ªÂä†Â≠∏ÁøíÈÄ≤Â±ïÊôÇÈñìÁ∑ö
        st.markdown("""
        ### Â≠∏ÁøíÊ≠∑Á®ã
        ```mermaid
        graph TD
            A[ÈÄ¢Áî≤Â§ßÂ≠∏<br>ÂåñÂ∑•Â≠∏Â£´] --> B[Âè∞ÁßëÂ§ß<br>ÂåñÂ∑•Á¢©Â£´]
            B --> C[Âè∞Â§ß<br>Ê≥ïÂæãË™≤Á®ã]
            C --> D[‰∫§Â§ß<br>ÁÆ°ÁêÜÁ¢©Â£´]
            
            style A fill:#f9f,stroke:#333,stroke-width:4px
            style B fill:#bbf,stroke:#333,stroke-width:4px
            style C fill:#ddf,stroke:#333,stroke-width:4px
            style D fill:#dfd,stroke:#333,stroke-width:4px
        ```
        """)
        
        # Ê∑ªÂä†Â∞àÊ•≠ÊäÄËÉΩË©ïÂàÜ
        st.markdown("### Â∞àÊ•≠ÊäÄËÉΩË©ïÂàÜ")
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### ÂåñÂ∑•Â∞àÊ•≠")
            st.progress(0.95)
            st.markdown("#### Êï∏ÊìöÂàÜÊûê")
            st.progress(0.90)
        
        with col2:
            st.markdown("#### Ê≥ïÂæãÁü•Ë≠ò")
            st.progress(0.85)
            st.markdown("#### ÁÆ°ÁêÜËÉΩÂäõ")
            st.progress(0.88)

elif page == "üõ†Ô∏è ÊäÄËÉΩÂ∞àÈï∑":
    st.markdown("""
    <div class='tech-section'>
        <h3 class='tech-category'>üîß ÊäÄË°ìÂ∑•ÂÖ∑</h3>
        <ul class='tech-list'>
            <li>üêç Python: Pandas, NumPy, Scikit-learn</li>
            <li>üß† Ê∑±Â∫¶Â≠∏Áøí: TensorFlow, PyTorch, YOLOv4</li>
            <li>ü§ñ AutoMLËàáLLMÊáâÁî®ÈñãÁôº</li>
        </ul>
        
    <div class='tech-section'>
        <h3 class='tech-category'>üí° Ë£ΩÁ®ãÂ∞àÈï∑</h3>
        <ul class='tech-list'>
            <li>üî¨ ÂçäÂ∞éÈ´îË£ΩÁ®ãÊï¥ÂêàËàáÂÑ™ÂåñÔºöÂçîÂä©Âà∂ÂÆöË£ΩÁ®ãÁ≠ñÁï•ÔºåÊ∏õÂ∞ëÁîüÁî¢Áì∂È†∏„ÄÇ</li>
            <li>üìä Ë£ΩÁ®ãÂèÉÊï∏ÂàÜÊûêËàáË™øÊ†°Ôºö‰ΩøÁî®Êï∏ÊìöÂàÜÊûêÂ∑•ÂÖ∑ÔºàÂ¶ÇDOEÔºâÈÄ≤Ë°åÁ≤æÊ∫ñË™øÊ†°„ÄÇ</li>
            <li>üéØ ËâØÁéáÊèêÂçáËàáÁï∞Â∏∏ÊéíÈô§ÔºöËøΩËπ§Áº∫Èô∑Ê†πÂõ†ÔºåÊèêÂçáÁîüÁî¢ÊïàËÉΩ„ÄÇ</li>
            <li>üîß Ë®≠ÂÇôÁõ£ÊéßËàáÈ†êÈò≤‰øùÈ§äÔºöÁµêÂêàIoTÊäÄË°ìÈÄ≤Ë°åË®≠ÂÇôÂØ¶ÊôÇÁõ£Êéß„ÄÇ</li>
        </ul>

    <div class='tech-section'>
        <h3 class='tech-category'>üìà Êï∏ÊìöÂàÜÊûê</h3>
        <ul class='tech-list'>
            <li>üìä Áµ±Ë®àÂàÜÊûêËàáÂØ¶È©óË®≠Ë®à (DOE)ÔºöÂà∂ÂÆöÊúâÊïàÂØ¶È©óË®àÁï´‰ª•Êé¢Á¥¢ÊúÄ‰Ω≥Ë£ΩÁ®ãÂèÉÊï∏„ÄÇ</li>
            <li>üìâ Ë£ΩÁ®ãËÉΩÂäõÂàÜÊûê (SPC/CpK)ÔºöÂàÜÊûêË£ΩÁ®ãÁ©©ÂÆöÊÄßËàáËÉΩÂäõÔºåÁ¢∫‰øùÂêàÊ†ºÁéá„ÄÇ</li>
            <li>üéØ ÂÖ≠Ê®ôÊ∫ñÂ∑Æ (6-Sigma) Â∞àÊ°àÔºöÂØ¶ÊñΩÊï∏ÊìöÈ©ÖÂãïÁöÑÊîπÈÄ≤Â∞àÊ°àÔºåÈôç‰ΩéÁº∫Èô∑Áéá„ÄÇ</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)
    
    # Ê∑ªÂä†ÊäÄËÉΩË©ïÂàÜÂ±ïÁ§∫
    st.markdown("### üí´ Â∞àÊ•≠ÊäÄËÉΩË©ïÂàÜ")
    
    # ÂâµÂª∫ÊäÄËÉΩÊï∏Êìö
    skills_data = {
        "Ë£ΩÁ®ãÊï¥ÂêàËÉΩÂäõ": {
            "ÂçäÂ∞éÈ´î/Èù¢ÊùøË£ΩÁ®ã": 95,
            "ËâØÁéáÂàÜÊûê": 92,
            "Áº∫Èô∑ÊîπÂñÑ": 90,
            "Ë£ΩÁ®ãÂÑ™Âåñ": 88
        },
        "ÊäÄË°ìËÉΩÂäõ": {
            "PythonÈñãÁôº": 85,
            "Êï∏ÊìöÂàÜÊûê": 90,
            "Ê©üÂô®Â≠∏Áøí": 82, 
            "Ëá™ÂãïÂåñÈñãÁôº": 85
        },
        "ÁÆ°ÁêÜËÉΩÂäõ": {
            "Â∞àÊ°àÁÆ°ÁêÜ": 88,
            "ÂúòÈöäÈ†òÂ∞é": 85,
            "ÂïèÈ°åËß£Ê±∫": 92,
            "Ê∫ùÈÄöÂçîË™ø": 90
        }
    }
    
    # ‰ΩøÁî®ÂàóÈ°ØÁ§∫ÊäÄËÉΩË©ïÂàÜ
    cols = st.columns(len(skills_data))
    for col, (category, skills) in zip(cols, skills_data.items()):
        with col:
            st.markdown(f"#### {category}")
            for skill, level in skills.items():
                st.markdown(f"**{skill}**")
                st.progress(level/100)

elif page == "üåü ÂÄã‰∫∫ÁâπË≥™":
    st.markdown("""
    <style>
    .personality-container {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1.5rem;
        padding: 1rem;
    }
    .personality-item {
        background: #ffffff;
        border-radius: 8px;
        padding: 1.5rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    .personality-item h3 {
        color: #1e88e5;
        margin-bottom: 1rem;
        font-size: 1.3rem;
    }
    .personality-item ul {
        list-style-type: none;
        padding-left: 0;
    }
    .personality-item li {
        margin-bottom: 0.5rem;
        padding-left: 1.5rem;
        position: relative;
    }
    .personality-item li:before {
        content: "‚Ä¢";
        color: #1e88e5;
        position: absolute;
        left: 0;
    }
    </style>
    
    <div class="personality-container">
        <div class="personality-item">
            <h3>üéØ È†òÂ∞éÂäõËàáÂúòÈöäÂêà‰Ωú</h3>
            <ul>
                <li>ÂÖ∑ÂÇôÂÑ™ÁßÄÁöÑÂúòÈöäÈ†òÂ∞éËÉΩÂäõ</li>
                <li>ËâØÂ•ΩÁöÑÊ∫ùÈÄöÊäÄÂ∑ß</li>
                <li>ÂÖ∑ÊúâÂêåÁêÜÂøÉ</li>
            </ul>
        </div>
        <div class="personality-item">
            <h3>üöÄ Â≠∏ÁøíËàáÂâµÊñ∞</h3>
            <ul>
                <li>ÊåÅÁ∫åÂ≠∏ÁøíÁöÑÁÜ±ÊÉÖ</li>
                <li>ÂâµÊñ∞ÊÄùÁ∂≠</li>
                <li>Ëß£Ê±∫ÂïèÈ°åÁöÑËÉΩÂäõ</li>
            </ul>
        </div>
        <div class="personality-item">
            <h3>üí° Â∞àÊ•≠Á¥†È§ä</h3>
            <ul>
                <li>È´òÂ∫¶Ë≤¨‰ªªÊÑü</li>
                <li>Ê≥®ÈáçÁ¥∞ÁØÄ</li>
                <li>ËøΩÊ±ÇÂçìË∂ä</li>
            </ul>
        </div>
        <div class="personality-item">
            <h3>ü§ù ÂúòÈöäÁ≤æÁ•û</h3>
            <ul>
                <li>ËâØÂ•ΩÁöÑÂúòÈöäÂêà‰Ωú</li>
                <li>Á©çÊ•µ‰∏ªÂãï</li>
                <li>Ê®ÇÊñºÂàÜ‰∫´</li>
            </ul>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Ê∑ªÂä†ËÉΩÂäõË©ïÂàÜ
    st.markdown("### üéØ ËÉΩÂäõË©ïÂàÜ")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### È†òÂ∞éÂäõ")
        st.progress(0.85)
        st.markdown("#### ÂâµÊñ∞Âäõ")
        st.progress(0.90)
        
    with col2:
        st.markdown("#### Âü∑Ë°åÂäõ")
        st.progress(0.95)
        st.markdown("#### Â≠∏ÁøíÂäõ")
        st.progress(0.92)

elif page == "üìà Â∞àÊ°àÂ±ïÁ§∫":
    st.markdown("## PCA ÂàÜÊûêÁµêÊûú")
    
    # ÁîüÊàêÊõ¥ÊòéÈ°ØÁöÑÂàÜÁæ§Êï∏Êìö
    n_samples = 150
    np.random.seed(42)
    
    # ÁîüÊàê‰∏âÂÄãÊòéÈ°ØÂàÜÈñãÁöÑÁæ§ÈõÜ
    cluster1 = np.random.normal(loc=[4, 4], scale=0.5, size=(n_samples//3, 2))
    cluster2 = np.random.normal(loc=[-4, -4], scale=0.5, size=(n_samples//3, 2))
    cluster3 = np.random.normal(loc=[4, -4], scale=0.5, size=(n_samples//3, 2))
    
    # Âêà‰ΩµÊï∏Êìö
    X = np.vstack([cluster1, cluster2, cluster3])
    
    # Ê∑ªÂä†Áæ§ÈõÜÊ®ôÁ±§
    labels = np.array(['Ë£ΩÁ®ãA'] * (n_samples//3) + ['Ë£ΩÁ®ãB'] * (n_samples//3) + ['Ë£ΩÁ®ãC'] * (n_samples//3))
    
    # ÂâµÂª∫Êï∏ÊìöÊ°Ü
    pca_df = pd.DataFrame(X, columns=['ÁâπÂæµ1', 'ÁâπÂæµ2'])
    pca_df['Áæ§ÈõÜ'] = labels
    
    # Áπ™Ë£Ω PCA Êï£ÈªûÂúñ
    fig = px.scatter(pca_df, x='ÁâπÂæµ1', y='ÁâπÂæµ2', 
                    color='Áæ§ÈõÜ',
                    title='Ë£ΩÁ®ãÂèÉÊï∏Áæ§ÈõÜÂàÜÊûê',
                    color_discrete_sequence=['#1f77b4', '#ff7f0e', '#2ca02c'],
                    labels={'ÁâπÂæµ1': '‰∏ªÊàêÂàÜ 1', 
                           'ÁâπÂæµ2': '‰∏ªÊàêÂàÜ 2',
                           'Áæ§ÈõÜ': 'Ë£ΩÁ®ãÈ°ûÂûã'})
    
    fig.update_layout(
        title_font_size=24,
        font=dict(size=16),
        legend=dict(
            font=dict(size=16),
            title_font=dict(size=16)
        ),
        xaxis=dict(
            title_font=dict(size=16),
            tickfont=dict(size=14)
        ),
        yaxis=dict(
            title_font=dict(size=16),
            tickfont=dict(size=14)
        ),
        plot_bgcolor='white',
        showlegend=True
    )
    
    fig.update_traces(
        marker=dict(size=12, 
                   line=dict(width=1, color='white')),
        selector=dict(mode='markers')
    )
    
    st.plotly_chart(fig)

elif page == "üî¨ Â∞àÊ°àÂàÜÊûê":
    st.markdown("# ÈÄ≤ÈöéÊï∏ÊìöÂàÜÊûê")
    
    # Áõ¥Êé•È°ØÁ§∫ÊâÄÊúâÂàÜÊûêÂÖßÂÆπÔºåÁßªÈô§‰∏ãÊãâÈÅ∏ÂñÆ
    st.markdown("""
    ## Ë£ΩÁ®ãÂàÜÊûê
    - Âç≥ÊôÇÁõ£ÊéßËàáÂàÜÊûêË£ΩÁ®ãÂèÉÊï∏
    - È†êÊ∏¨ÊÄßÁ∂≠Ë≠∑ËàáÁï∞Â∏∏Ê™¢Ê∏¨
    - ÂìÅË≥™ÊéßÂà∂ËàáÂÑ™Âåñ
    """)
    
    # ÁîüÊàêË£ΩÁ®ãÊï∏Êìö
    process_data = pd.DataFrame(np.random.randn(500, 3), columns=['Ê∫´Â∫¶', 'Â£ìÂäõ', 'ÂìÅË≥™'])
    
    # Áõ∏ÈóúÊÄßÁÜ±Âúñ
    corr = process_data.corr()
    fig = px.imshow(corr, 
                   title='ÂèÉÊï∏Áõ∏ÈóúÊÄßÁü©Èô£',
                   color_continuous_scale='RdBu',
                   labels={'color': 'Áõ∏Èóú‰øÇÊï∏'})
    fig.update_layout(
        title_font_size=24,
        font=dict(size=16)
    )
    st.plotly_chart(fig)
    
    # ÊôÇÈñìÂ∫èÂàóÂàÜÊûê
    st.markdown("## ÊôÇÈñìÂ∫èÂàóÂàÜÊûê")
    dates = pd.date_range(start='2024-01-01', periods=100)
    ts_data = pd.DataFrame({
        'Êó•Êúü': dates,
        'Ê∫´Â∫¶': np.random.normal(25, 2, 100) + np.sin(np.linspace(0, 10, 100)) * 5,
        'Â£ìÂäõ': np.random.normal(100, 5, 100) + np.cos(np.linspace(0, 10, 100)) * 10
    })
    
    fig = px.line(ts_data, x='Êó•Êúü', y=['Ê∫´Â∫¶', 'Â£ìÂäõ'],
                 title='Ë£ΩÁ®ãÂèÉÊï∏Ë∂®Âã¢ÂàÜÊûê')
    fig.update_layout(
        title_font_size=24,
        font=dict(size=16),
        legend=dict(font=dict(size=16))
    )
    st.plotly_chart(fig)
    
    # ÂìÅË≥™ÊéßÂà∂Âúñ
    st.markdown("## ÂìÅË≥™ÊéßÂà∂")
    quality_data = pd.DataFrame({
        'Ê®£Êú¨': range(1, 51),
        'Ê∏¨ÈáèÂÄº': np.random.normal(100, 2, 50)
    })
    
    ucl = quality_data['Ê∏¨ÈáèÂÄº'].mean() + 3 * quality_data['Ê∏¨ÈáèÂÄº'].std()
    lcl = quality_data['Ê∏¨ÈáèÂÄº'].mean() - 3 * quality_data['Ê∏¨ÈáèÂÄº'].std()
    
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=quality_data['Ê®£Êú¨'], y=quality_data['Ê∏¨ÈáèÂÄº'],
                            mode='lines+markers', name='Ê∏¨ÈáèÂÄº'))
    fig.add_hline(y=ucl, line_dash="dash", line_color="red", name='UCL')
    fig.add_hline(y=lcl, line_dash="dash", line_color="red", name='LCL')
    fig.update_layout(
        title='ÂìÅË≥™ÊéßÂà∂Âúñ',
        title_font_size=24,
        font=dict(size=16),
        xaxis_title="Ê®£Êú¨Á∑®Ëôü",
        yaxis_title="Ê∏¨ÈáèÂÄº"
    )
    st.plotly_chart(fig)

# È†ÅËÖ≥
st.markdown("""
---
<div style='text-align: center; color: var(--text-color); padding: 20px;'>
    2025 ÂäâÊôâ‰∫® | AI Enhanced Resume | Built with ‚ù§Ô∏è and ‚ù§Ô∏è
</div>
""", unsafe_allow_html=True)
